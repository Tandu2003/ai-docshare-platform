// This is your Prisma schema file for AI-Powered Smart Document Sharing System
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// AUTHENTICATION & AUTHORIZATION
// ================================

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("[]") // Array of permission strings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("roles")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  password     String // Hashed password
  firstName    String
  lastName     String
  avatar       String?
  bio          String?
  roleId       String
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  resetToken   String?
  resetExpires DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  role            Role                   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  documents       Document[]             @relation("DocumentUploader")
  uploadedFiles   File[]                 @relation("FileUploader")
  ratings         Rating[]
  comments        Comment[]
  searches        SearchHistory[]
  notifications   Notification[]
  bookmarks       Bookmark[]
  bookmarkFolders BookmarkFolder[]
  downloads       Download[]
  views           View[]
  recommendations RecommendationEngine[]
  CommentLike     CommentLike[]
  ActivityLog     ActivityLog[]

  // Indexes
  @@index([email])
  @@index([username])
  @@index([roleId])
  @@index([isActive])
  @@map("users")
}

// ================================
// DOCUMENT MANAGEMENT
// ================================

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  icon          String?
  color         String?
  parentId      String?
  isActive      Boolean  @default(true)
  documentCount Int      @default(0)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  documents Document[]

  // Indexes
  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

model Document {
  id            String   @id @default(cuid())
  title         String
  description   String?
  uploaderId    String
  categoryId    String
  downloadCount Int      @default(0)
  viewCount     Int      @default(0)
  averageRating Float    @default(0)
  totalRatings  Int      @default(0)
  isPublic      Boolean  @default(true)
  isPremium     Boolean  @default(false)
  isApproved    Boolean  @default(false)
  isDraft       Boolean  @default(false)
  tags          String[] @default([])
  language      String   @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  uploader        User                   @relation("DocumentUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  category        Category               @relation(fields: [categoryId], references: [id])
  files           DocumentFile[] // Many-to-many relationship with files
  ratings         Rating[]
  comments        Comment[]
  aiAnalysis      AIAnalysis?
  searches        SearchHistory[]
  bookmarks       Bookmark[]
  downloads       Download[]
  views           View[]
  recommendations RecommendationEngine[]

  // Indexes
  @@index([uploaderId])
  @@index([categoryId])
  @@index([isPublic])
  @@index([isApproved])
  @@index([isDraft])
  @@index([averageRating])
  @@index([downloadCount])
  @@index([viewCount])
  @@index([createdAt])
  @@index([tags])
  @@map("documents")
}

// Junction table for Document-File many-to-many relationship
model DocumentFile {
  id         String   @id @default(cuid())
  documentId String
  fileId     String
  order      Int      @default(0) // For ordering files within a document
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  file     File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([documentId, fileId]) // One file can only be added once to a document
  @@index([documentId])
  @@index([fileId])
  @@map("document_files")
}

// ================================
// INTERACTION & ENGAGEMENT
// ================================

model Rating {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  rating     Int // 1-5 stars
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, documentId]) // One rating per user per document
  @@index([documentId])
  @@index([rating])
  @@map("ratings")
}

model Comment {
  id         String    @id @default(cuid())
  userId     String
  documentId String
  parentId   String?
  content    String
  isEdited   Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  likesCount Int       @default(0)
  editedAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  parent   Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]     @relation("CommentReplies")
  likes    CommentLike[]

  // Indexes
  @@index([userId])
  @@index([documentId])
  @@index([parentId])
  @@index([createdAt])
  @@index([isDeleted])
  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, commentId])
  @@index([commentId])
  @@map("comment_likes")
}

// ================================
// AI & ANALYTICS
// ================================

model AIAnalysis {
  id             String   @id @default(cuid())
  documentId     String   @unique
  summary        String?
  keyPoints      String[] @default([])
  suggestedTags  String[] @default([])
  difficulty     String   @default("beginner") // beginner, intermediate, advanced
  readingTime    Int      @default(0) // in minutes
  language       String   @default("en")
  confidence     Float    @default(0)
  sentimentScore Float? // Sentiment analysis of content
  topicModeling  Json? // Topic modeling results
  namedEntities  Json? // Named entity recognition
  processedAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([difficulty])
  @@index([language])
  @@index([confidence])
  @@index([processedAt])
  @@map("ai_analyses")
}

model SearchHistory {
  id                String   @id @default(cuid())
  userId            String
  query             String
  filters           Json     @default("{}")
  resultsCount      Int      @default(0)
  clickedDocumentId String?
  searchVector      String? // For search analytics
  sessionId         String?
  ipAddress         String?
  userAgent         String?
  searchedAt        DateTime @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clickedDocument Document? @relation(fields: [clickedDocumentId], references: [id])

  // Indexes
  @@index([userId])
  @@index([query])
  @@index([searchedAt])
  @@index([clickedDocumentId])
  @@index([sessionId])
  @@map("search_history")
}

model RecommendationEngine {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  score      Float
  reason     String // "similar_content", "popular_in_category", "user_behavior"
  algorithm  String // "collaborative_filtering", "content_based", "hybrid"
  metadata   Json? // Additional recommendation metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId, algorithm])
  // Indexes
  @@index([userId])
  @@index([score])
  @@index([algorithm])
  @@index([createdAt])
  @@map("recommendations")
}

// ================================
// USER EXPERIENCE
// ================================

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String // "comment", "rating", "system", "document_approved", "collaboration"
  title     String
  message   String
  data      Json? // Additional notification data
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model BookmarkFolder {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks Bookmark[]

  // Indexes
  @@index([userId])
  @@index([sortOrder])
  @@map("bookmark_folders")
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  folderId   String?
  notes      String?
  createdAt  DateTime @default(now())

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  folder   BookmarkFolder? @relation(fields: [folderId], references: [id])

  // Constraints
  @@unique([userId, documentId])
  @@index([userId])
  @@index([documentId])
  @@index([folderId])
  @@map("bookmarks")
}

model Download {
  id           String   @id @default(cuid())
  userId       String? // Allow null for guest downloads
  documentId   String
  ipAddress    String?
  userAgent    String?
  referrer     String?
  downloadedAt DateTime @default(now())

  // Relations
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // Make optional
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([documentId])
  @@index([downloadedAt])
  @@index([ipAddress])
  @@map("downloads")
}

model View {
  id         String   @id @default(cuid())
  userId     String?  // nullable for anonymous views
  documentId String
  ipAddress  String?
  userAgent  String?
  referrer   String?
  viewedAt   DateTime @default(now())

  // Relations
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([documentId])
  @@index([viewedAt])
  @@index([ipAddress])
  @@map("views")
}

// ================================
// COLLABORATION & MODERATION (Removed: Collaboration, Report)
// ================================

// ================================
// SYSTEM ADMINISTRATION
// ================================

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string") // "string", "number", "boolean", "json"
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes
  @@index([key])
  @@index([isPublic])
  @@map("system_settings")
}

model ActivityLog {
  id           String   @id @default(cuid())
  userId       String?
  action       String // "login", "upload", "download", "search", etc.
  resourceType String? // "document", "user", "category"
  resourceId   String?
  ipAddress    String?
  userAgent    String?
  metadata     Json?
  createdAt    DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([resourceId])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("activity_logs")
}

// ================================
// FILE STORAGE
// ================================

model File {
  id           String   @id @default(cuid())
  originalName String // Original filename
  fileName     String // Stored filename (unique)
  mimeType     String // MIME type of the file
  fileSize     BigInt // File size in bytes
  fileHash     String   @unique // SHA-256 hash for duplicate detection
  storageUrl   String // Cloudflare R2 URL
  thumbnailUrl String? // Thumbnail URL if applicable
  uploaderId   String // User who uploaded the file
  isPublic     Boolean  @default(false) // Whether file is publicly accessible
  metadata     Json     @default("{}") // Additional metadata (dimensions, etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader      User           @relation("FileUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  documentFiles DocumentFile[] // Many-to-many relationship with documents

  // Indexes
  @@index([uploaderId])
  @@index([mimeType])
  @@index([fileHash])
  @@index([createdAt])
  @@map("files")
}

// ================================
// ENUMS
// ================================
